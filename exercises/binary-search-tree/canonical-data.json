{
    "exercise": "binary-search-tree",
    "version": "1.0.0",
    "comments": [
        "For simplicity only positive integer is considered as valid data,",
        "null should be replaced by the respective language equivalent or -1",
        "if the language does not have any.",

        "The purpose of ths exercise is to create a data structure which",
        "makes sure the data is always sorted, hence the exercise should",
        "not make use of any sort() functions or sorting algorithms."
    ],
    "cases": [{
            "description": "insert invalid/null data into the tree",
            "property": "insert",
            "value": null,
            "expected": false
        },
        {
            "description": "insert a number into the tree",
            "property": "insert",
            "value": 6,
            "expected": true
        },
        {
            "description": "insert a number that already exist",
            "property": "insert",
            "value": 6,
            "expected": false
        },
        {
            "description": "search invalid/null data",
            "property": "search",
            "value": null,
            "expected": false
        },
        {
            "description": "search a number that exists",
            "property": "search",
            "value": 6,
            "expected": true
        },
        {
            "description": "search a number that does not exist",
            "property": "search",
            "value": 11,
            "expected": false
        },
        {
            "description": "traverse the data in ascending order",
            "property": "ascendingOrder",
            "comments": [
                "Assuming the data is entered in this order :",
                "6 -> 1 -> 3 -> 2 -> 5"
            ],
            "expected": [1, 2, 3, 5, 6]
        },
        {
            "description": "traverse the data in descending order",
            "property": "descendingOrder",
            "comments": [
                "Assuming the data is entered in this order :",
                "6 -> 1 -> 3 -> 2 -> 5"
            ],
            "expected": [6, 5, 3, 2, 1]
        }
    ]
}